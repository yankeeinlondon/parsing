//! Markdown Parsing Grammer in PEG format

/// line feed char
lf = @{ "\n" }
/// carraige return char
cr = @{ "\r" }
/// tab char
tab = @{ "\t" }
/// space char
space = @{ " " }

/// space char in silent matcher
pad = _{ space }

/// optionally allows up to three characters of silent spaces
opt3_space = _{ " "{0,3} }

/// form feed char
ff = @{ "\\f" } 

/// Whitespace in Markdown is the space character and it's presence within
/// some parts of the Markdown is completely inconsequencial.
WHITESPACE = _{ space | tab | ff | cr | lf }

/// trims all whitespace in a silent token
trim = _{ WHITESPACE* }

/// any character _other_ than a NEWLINE
not_newline = {
	!NEWLINE ~ ANY
}

/// all remaining characters up to the NEWLINE 
/// (does not consume the NEWLINE char itself)
rest_of_line = @{ not_newline* }

/// the text content of an HTML attribute's _value_
/// -- which is always a string of some sort -- it 
/// terminates when it finds a non-escaped double quote
/// character; the double quote is not consumed as part
/// of the match
text = ${ (!double_quote ~ ANY) }

/// similar to "text" but terminates when it finds the
/// a NEWLINE character rather than on the `"` character.
title = ${ (!NEWLINE ~ ANY)* }


title_with_attrs = ${ (!NEWLINE ~ dict | ANY )}

/// An [entity reference](https://spec.commonmark.org/0.30/#entity-references) starts 
/// with `&` and concludes with `;`
entity_ref = @{ "&" ~ ASCII_ALPHA ~ ";" }

/// [Decimal numeric character references](https://spec.commonmark.org/0.30/#decimal-numeric-character-references)
/// start with `&`, terminate with `;` and have 1-7 digits in-between.
dec_num_ref = @{ "&" ~ ASCII_DIGIT{1,7} ~ ";" }

/// [Hexadecimal char refs](https://spec.commonmark.org/0.30/#hexadecimal-numeric-character-references)
hex_num_ref = @{ "&#" ~ ASCII_HEX_DIGIT{1,6}}

open_bracket = @{ "(" | "[" | "{" }
close_bracket = @{ ")" | "]" | "}" }

/// a dash `-` character
dash = @{ "-" }
/// an underscore `_` character
underscore = @{"_"}
/// the asterisk `*` character
asterisk = @{"*"}

backtick = @{ "`" }
fence = @{ backtick ~ backtick ~ backtick }
lang_fence = @{ fence ~ text? }

lowercase = @{ LOWERCASE_LETTER | ASCII_ALPHA_LOWER }
uppercase = @{ UPPERCASE_LETTER | ASCII_ALPHA_UPPER }
number = @{ ASCII_DIGIT | LETTER_NUMBER }

/// camelCased variable name
camel_case = @{ lowercase ~ (LETTER | LETTER_NUMBER)* }
/// PascalCased variable name
pascal_case = @{ uppercase ~ (LETTER | LETTER_NUMBER)* }

/// A dasherized variable name
kebab_case = @{ lowercase ~ (dash? ~ (lowercase | number))*}

/// A snake_case variable name
snake_case = @{ lowercase ~ (underscore? ~ (lowercase | number))* }

/// A variable name that fits a PascalCase, camelCase, kebab-case, or 
/// snake_case naming convention.
cased_var = { pascal_case | camel_case | kebab_case | snake_case }

/// a plain double quote mark `"` which does not include any "smart" equivalents
double_quote = @{ "\"" }
/// a plain single quote mark `'` which does not include any "smart" equivalents
single_quote = @{ "\'" }

/// Opening Double Quote. Includes basic quote `"` as well smart quotes `‟`
open_double_quote = _{ "\"" | "‟" }
close_double_quote = _{ "\"" | "”" | "〞" }

esc_open_double_quote = _{ "\\\"" | "\\‟" | "‟" }
esc_close_double_quote = _{ "\\\"" | "”" | "\\”" }

/// represents a "variable" which must start with a ALPHA
/// and then can be a snake_cased ALPHANUMERIC.
var = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")+ }

/// union of line ending characters
line_ending = @{
    lf |
    cr |
    (cr ~ lf)
}

empty_line = @{ WHITESPACE* ~ line_ending }

/// accepts all markdown content up to the end of a line
content = { text ~ &eol}

/// a [_line_](https://spec.commonmark.org/0.30/#preliminaries) in markdown 
/// represents a _line_ in the file/source but it extracts the left-hand indentation.
line = { indent* ~ content }

/// The end of a line in Markdown is either a single newline
/// character/sequence or the end of the file
eol = _{ NEWLINE | EOI }

/// matches on an _indentation_ which is either a single `\t` character
/// or two spaces.
indent = @{ tab | (space ~ space ~ space ~ space) }

sentence_terminators = @{ "." | "!" | "?" }
sentence_sep_char = @{ "," | ";" }
special_char = @{ "@" | "#" | "^" | "&" | "*" | "~" }
math_char = @{"/" | "-" | "+" | "*"}
numeric_char = @{ ASCII_DIGIT | "+" | "-" }
str_char = @{ ASCII_ALPHA }
comment = @{ "<!--" ~ ANY ~ "-->" }

// INLINE
// ---------------------------------

inline = { 
    (
        comment |
        tag | link | text
    )
    ~ paragraph_end?
}

non_whitepace = { !WHITESPACE }

/// includes all ascii and unicode punction, except for
/// quotation marks (which is contained in OTHER_PUNCTUATION).
punctuation = @{ 
	sentence_terminators | 
    sentence_sep_char |
    DASH_PUNCTUATION |
    INITIAL_PUNCTUATION |
    CONNECTOR_PUNCTUATION | 
    OPEN_PUNCTUATION |
    CLOSE_PUNCTUATION |
    FINAL_PUNCTUATION
}

/// the `:` char literal
colon = @{ ":" }
/// the `=` char literal
equals = @{ "=" }

assignment_op = _{ colon | equals }

/// Assignment operation: [key][op][open_quote][value][close_quote]
/// where:
///   - **op** is `:` or `=`
///   - **open_quote** and **close_quote** are double quote marks but can be omitted
assignment = @{
	key ~ 
    trim ~
    assignment_op ~ 
    trim ~
    open_double_quote? ~ 
    value ~ 
    close_double_quote?
}

/// An HTML attribute's "value" ... which is anything up to but not
/// including a non-smart double quote mark.
attr_value = @{ 
    (!double_quote ~ ANY)*
}

/// an HTML attribute's "key" which must follow the snake_case naming convention
/// but many SPA frameworks have extended this to allow other casing types so we
/// will accept camelCase, PascalCase, snake_case, but NOT kebab-case.
key = @{ kebab_case | snake_case }
/// an HTML attribute's "value" which is fairly permissive but double quotation marks
/// must be escaped to be included.
value = @{ attr_value }

/// an HTML tag name in either **kebab** or **pascal** casing
tagname = ${ kebab_case | pascal_case }

/// HTML tag attribute with key and value
attr = ${ key ~ "=" ~ open_double_quote ~ value ~ close_double_quote}

/// a collection of HTML tag attributes
attrs = ${ (WHITESPACE* ~ attr)* ~ WHITESPACE* }

/// a dictionary of key value pairs
/// ```md
/// ## My Topic { class: "foobar" }
/// ```
dict = { "{" ~ attrs ~ "}" }

/// HTML start tag
start_tag = @{ 
    "<" ~
	tagname ~
    attrs ~
    ">"
}

/// HTML end tag
end_tag = @{ 
	"</" ~ 
	tagname ~ 
    trim ~ 
    ">"
}

inner = ${ ANY }

/// An HTML tag which is not self-closing and therefore contains an "inner" scope
block_tag = {
    start_tag ~
    inner* ~
    end_tag
}

self_closing_tag = @{ 
	"<" ~ 
    tagname ~ 
    attrs ~
    "/>" 
}

/// HTML tag; either self-closing or start-to-end tags
tag = { 
    block_tag | 
    self_closing_tag 
} 

/// A rule which is matches _1 or more_ spaces in a row. This 
/// is useful for allowing a space to be preserved while collapsing 
/// multiple spaces into just a single space.
space_collapse = { " "+ }

/// a silent set of 0 to 2 spaces
maybe_two_space = _{ " "{0,2} }
/// a silent set of 0 to 3 spaces
maybe_three_space = _{ " "{0,3} }


greater_than = @{ ">" }
less_than = @{ "<" }
html_gt = @{ "&gt;" }
html_lt = @{ "&lt;" }

/// The descriptive part of a Markdown link
link_desc = @{ "[" ~ attr_value ~ "]" }

/// A URI reference to a _local_ resource
link_uri = @{ "(" ~ not_newline ~ ")" }

protocol = { "https" | "http" }
protocol_delim = _{ "://"  }
/// A URI reference to an _external_ resource
external_uri = @{ protocol ~ protocol_delim ~ attr_value }

/// A URI reference (local or external)
uri = @{ external_uri }

/// a Markdown based link and description
/// ```md
/// [somewhere](https://somewhere.com)
/// ```
link = { link_desc ~ link_uri }

italic_marker = @{ "_" | "*" }
bold_marker = @{"**"}

list_marker = @{ "-" | "+" | "*" }
list_item = @{ indent* ~ list_marker }
list = { (list_item ~ eol)+ }

// BLOCKS
// ---------------------------------

// HEADING

/// the `#` character when found at the start of a line is considered
/// a h_prefix.
h_prefix = _{ "#" }

/// Level 1 heading in Markdown
h1 = @{ opt3_space ~ h_prefix ~ trim ~ title ~ eol}
/// Level 2 heading in Markdown
h2 = @{ opt3_space ~ h_prefix{2} ~ trim ~ title ~ eol}
/// Level 3 heading in Markdown
h3 = @{ opt3_space ~ h_prefix{3} ~ trim ~ title ~ eol}
/// Level 4 heading in Markdown
h4 = @{ opt3_space ~ h_prefix{4} ~ trim ~ title ~ eol}
/// Level 5 heading in Markdown
h5 = @{ opt3_space ~ h_prefix{5} ~ trim ~ title ~ eol}
/// Level 6 heading in Markdown
h6 = @{ opt3_space ~ h_prefix{6} ~ trim ~ title ~ eol}

/// Markdown heading (level 1-6)
///
/// note: headings must have one space following the `#` character
/// but may have as many as three. Some looser implementations allow
/// for zero spaces but this it "out of spec" for Commonmark.
heading = ${ h6 | h5 | h4 | h3 | h2 | h1 }

/// The end of a paragraph in Markdown is two new line chars
paragraph_end = @{ empty_line ~ empty_line }

paragraph = { (!paragraph_end ~ ANY ) ~ paragraph_end }

container_block = { paragraph }

thematic_char = @{ "*" | "-" | "_" }
/// A thematic break is a block element which creates a page
/// break by using three (or more) break characters (`*`,`-`,`_`) at
/// the start of a line (with up to three spaces as a prefix)
thematic_break = { pad{0,3} ~ PUSH(thematic_char) ~ PEEK{2} ~ PEEK* ~ NEWLINE }

leaf_block = { heading | thematic_break  }

/// Markdown BLOCK element
block = { leaf_block | container_block }


/// A Markdown file
file = { 
    SOI ~
    block* ~
    EOI
}

